// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expenses  Expense[]
  products Product[]
  packaging Packaging[]
  productExpenses ProductExpense[]
  packagingExpenses PackagingExpense[]
  productReplenishments ProductReplenishment[]
  packagingReplenishments PackagingReplenishment[]

  @@map("users")
}

// Expense model for tracking business expenses
model Expense {
  id              String   @id @default(cuid())
  title           String
  quantity        Int
  amount          Decimal  @db.Decimal(10, 2) @default(0)
  shippingCost    Decimal  @db.Decimal(10, 2) @default(0)
  vat             Decimal  @db.Decimal(10, 2) @default(0)
  totalAmount     Decimal  @db.Decimal(10, 2)
  perQuantityCost Decimal @db.Decimal(10, 2)
  buyLink         String?
  invoiceLink     String?
  date            DateTime
  category        String
  comments        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Product and packaging expense relations
  productExpenses ProductExpense[]
  packagingExpenses PackagingExpense[]
  productReplenishments ProductReplenishment[]
  packagingReplenishments PackagingReplenishment[]

  @@map("expenses")
}

// Product model for tracking products with COG calculation
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  sku             String?  // Product SKU
  currentQuantity Int      @default(0)
  unitCost        Decimal  @db.Decimal(10, 2)
  totalCOG        Decimal  @db.Decimal(10, 2) @default(0) // Total Cost of Goods
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedExpenses  ProductExpense[]
  replenishments  ProductReplenishment[]

  @@map("products")
}

// Packaging model for tracking packaging materials
model Packaging {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // Box, Bubble Wrap, Tape, etc.
  currentQuantity Int      @default(0)
  unitCost        Decimal  @db.Decimal(10, 2)
  totalCOG        Decimal  @db.Decimal(10, 2) @default(0) // Total Cost of Goods
  linkedProducts  String?  // JSON array of product IDs that use this packaging
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedExpenses  PackagingExpense[]
  replenishments  PackagingReplenishment[]

  @@map("packaging")
}

// Link products to expenses for COG calculation
model ProductExpense {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  expenseId       String
  expense         Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  allocatedCost   Decimal  @db.Decimal(10, 2) // How much of this expense is allocated to this product
  createdAt       DateTime @default(now())

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, expenseId])
  @@map("product_expenses")
}

// Link packaging to expenses for COG calculation
model PackagingExpense {
  id              String   @id @default(cuid())
  packagingId     String
  packaging       Packaging @relation(fields: [packagingId], references: [id], onDelete: Cascade)
  expenseId       String
  expense         Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  allocatedCost   Decimal  @db.Decimal(10, 2) // How much of this expense is allocated to this packaging
  createdAt       DateTime @default(now())

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([packagingId, expenseId])
  @@map("packaging_expenses")
}

// Product replenishment history
model ProductReplenishment {
  id              String   @id @default(cuid())
  quantity        Int
  cost            Decimal  @db.Decimal(10, 2)
  unitCost        Decimal  @db.Decimal(10, 2)
  date            DateTime
  invoiceLink     String?
  comments        String?
  createdAt       DateTime @default(now())

  // Relations
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional link to expense
  expenseId       String?
  expense         Expense? @relation(fields: [expenseId], references: [id], onDelete: SetNull)

  @@map("product_replenishments")
}

// Packaging replenishment history
model PackagingReplenishment {
  id              String   @id @default(cuid())
  quantity        Int
  cost            Decimal  @db.Decimal(10, 2)
  unitCost        Decimal  @db.Decimal(10, 2)
  date            DateTime
  invoiceLink     String?
  comments        String?
  createdAt       DateTime @default(now())

  // Relations
  packagingId     String
  packaging       Packaging @relation(fields: [packagingId], references: [id], onDelete: Cascade)
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional link to expense
  expenseId       String?
  expense         Expense? @relation(fields: [expenseId], references: [id], onDelete: SetNull)

  @@map("packaging_replenishments")
}


// Role enum
enum Role {
  USER
  ADMIN
}
