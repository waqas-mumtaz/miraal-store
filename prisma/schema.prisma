// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices Invoice[]
  expenses Expense[]
  plans Plan[]

  @@map("users")
}








// Invoice model for tracking invoices
model Invoice {
  id              String   @id @default(cuid())
  invoice_number  String
  supplier_name   String
  supplier_url    String?
  date            DateTime
  total_amount    Decimal? @db.Decimal(10, 2)
  pdf_link        String
  comments        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

// Expense model for tracking business expenses
model Expense {
  id              String   @id @default(cuid())
  expense_id      String   @unique
  invoice_id      String
  item_name       String
  category        String
  quantity        Int
  cost            Decimal  @db.Decimal(10, 2)
  shipping_cost   Decimal  @db.Decimal(10, 2) @default(0)
  vat             Decimal  @db.Decimal(10, 2) @default(0)
  total_cost      Decimal  @db.Decimal(10, 2)
  unit_price      Decimal  @db.Decimal(10, 2)
  date            DateTime
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// Parent Plan model - stores common fields across all marketplaces
model Plan {
  id              String   @id @default(cuid())
  productName     String
  unitPrice       Decimal  @db.Decimal(10, 2)
  sellPrice       Decimal  @db.Decimal(10, 2)
  sourceLink      String
  shippingCharges Decimal  @db.Decimal(10, 2) @default(0)
  shippingCost    Decimal  @db.Decimal(10, 2) @default(0)
  status          String   @default("planned")
  profit          Decimal  @db.Decimal(10, 2)
  marketplace     String   // "ebay" or "amazon"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Child relations
  ebayDetails     EbayPlanDetails?
  amazonDetails   AmazonPlanDetails?

  @@map("plans")
}

// eBay-specific plan details
model EbayPlanDetails {
  id              String   @id @default(cuid())
  ebayLink        String?
  vat             Decimal  @db.Decimal(10, 2) @default(0)
  ebayCommission  Decimal  @db.Decimal(5, 2) @default(15)
  advertisingPercentage Decimal @db.Decimal(5, 2) @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  planId          String   @unique
  plan            Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("ebay_plan_details")
}

// Amazon-specific plan details
model AmazonPlanDetails {
  id              String   @id @default(cuid())
  fulfillmentCost Decimal  @db.Decimal(10, 2) @default(0)
  feePerItem      Decimal  @db.Decimal(10, 2) @default(0)
  storageFees     Decimal  @db.Decimal(10, 2) @default(0)
  fulfillmentType String   @default("FBA")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  planId          String   @unique
  plan            Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("amazon_plan_details")
}


// Role enum
enum Role {
  USER
  ADMIN
}
